#+TITLE: MinasMazar's blog ~ dev stuff
#+AUTHOR: MinasMazar
#+EMAIL: minasmazar@gmail.com
#+DATE: <2024-01-31 Wed>
#+STARTUP: overview

* Docker
** Handling volumes

#+begin_src sh
  docker run --rm --name postgres --volume ~/postgres-data:/var/lib/postgresql/data postgres:latest
#+end_src

** Disable/enable autostart of a docker container.

#+begin_src sh
docker update --restart [no|unless-stopped] <docker-container>
#+end_src

** Playing Sound in Docker Containers ([[https://prateeksrivastav598.medium.com/playing-sound-in-docker-containers-a-step-by-step-guide-f7a06e246a35][here the source article]])

#+begin_src sh
  docker run --rm -it --privileged=true --device=/dev/snd:/dev/snd audio-container:v1
#+end_src

** Rename a docker image

#+begin_src sh
  docker tag OldName:tag NewName:tag
#+end_src

** Rename a docker container

#+begin_src sh
  sudo docker rename oldname_app newname_app
#+end_src

** Installing Docker on Raspberry PI

Follow [[https://docs.docker.com/engine/install/raspberry-pi-os/#install-using-the-repository][the instructions in the Docker documentation]]. Before you can install Docker Engine, you need to uninstall any conflicting packages. Distro maintainers provide an unofficial distributions of Docker packages in APT. You must uninstall these packages before you can install the official version of Docker Engine.

#+begin_src sh
  #!/bin/bash

  # Uninstall unofficial distributions of Docker packages in APT

  sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

  # Remove images, containers, volumes, or custom configuration files 

  sudo rm -rf /var/lib/docker
  sudo rm -rf /var/lib/containerd

  # Add Docker's official GPG key:
  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/raspbian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc

  # Set up Docker's APT repository:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/raspbian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update

  # Install Docker packages
  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # Verify that the installation is successful by running the hello-world image:
  sudo docker run hello-world
#+end_src

Remember to keep the Build and App images in sync (see [[https://github.com/teslamate-org/teslamate/issues/3691#issuecomment-1966074893][here]])

When building an image, you can see an error like /cannot find the image for the platform.../. Consider to add =--platform arm64= flag to the =docker build= command. [[https://docs.docker.com/reference/cli/docker/buildx/build/#platform][Here's the official Docker documentation]] for this flag. Also keep an eye [[https://github.com/containerd/containerd/blob/v1.4.3/platforms/platforms.go#L63][to this file]] to get a list of platforms. Remember you can detect the platform of the current machine via =uname -a=.

If you're using Docker to run Elixir, you can face an error like this during the dependencies compilation:

#+begin_src sh
could not compile dependency :ssl_verify_fun, "mix compile" failed. Errors may have been logged above. You can recompile this dependency with "mix deps.compile ssl_verify_fun", update it with "mix deps.update ssl_verify_fun" or clean it with "mix deps.clean ssl_verify_fun"
#+end_src

In this case, install the =erlang-public-key= package should solve the issue.


The Raspbian issue: another error that can occur while building a docker image on Raspbian that uses =apt-get= commands is

#+begin_src sh
  ERROR: failed to solve: process "/bin/sh -c apt-get update -y &&   apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates &&   apt-get clean && rm -f /var/lib/apt/lists/*_*" did not complete successfully: exit code: 159
#+end_src

It seems there's a problem with [[https://github.com/moby/moby/issues/40734][libseccomp]]; according to [[https://askubuntu.com/questions/1263284/apt-update-throws-signature-error-in-ubuntu-20-04-container-on-arm][this SO thread]] the solution is to upgrade libseccomp manually **on the host system**: download [[https://packages.debian.org/sid/libseccomp2][here]] and =sudo dpkg -i libseccomp2_2.4.3-1+b1_armhf.deb=.

** Usefull links for troubleshooting

- https://github.com/teslamate-org/teslamate/issues/3691
  
* Icons

- https://remixicon.com/

* Git

How do I change the author and committer name/email for multiple commits?

#+begin_src sh
  git rebase -r a5bf6c2 --exec 'git commit --amend --no-edit --reset-author'
#+end_src

* Pulseaudio

You can refer this interesting [[https://askubuntu.com/questions/71863/how-to-change-pulseaudio-sink-with-pacmd-set-default-sink-during-playback][SO thread]].

#+begin_src sh
  pacmd help list-sinks
  pacmd list-sink-inputs
  pacmd move-sink-input 5 1
#+end_src

* Alsamixer

Toggle mute

#+begin_src sh
  amixer set Master toggle
#+end_src

* [[https://it.wikipedia.org/wiki/Crontab][Crontab]]

If you need to write a crontab entry you can use https://crontab.guru/

* [[https://elixir-lang.org/][Elixir]]

- https://elixir-toolbox.dev/

Install Elixir on Raspberry/Raspbian (source article [[https://erlangsolutions.medium.com/installing-elixir-on-a-raspberry-pi-the-easy-way-22f347a77e2c][here]]).

#+begin_src sh
  sudo apt-get update && sudo apt-get install erlang erlang-dev elixir
#+end_src

** Phoenix Livebooks

- [[https://notes.club/][Discover Livebook notebooks (Elixir)]]
- https://github.com/aslakjohansen/livebook-demos
- https://github.com/Arp-G/async-elixir
- https://github.com/whatyouhide/guide_async_processing_in_elixir

* [[https://www.raspberrypi.com/tutorials/how-to-use-a-raspberry-pi-in-kiosk-mode/][How to use a Raspberry Pi in /kiosk mode/]]
* systemd and journalctl

Add a service to systemd

More info [[https://learn.sparkfun.com/tutorials/how-to-run-a-raspberry-pi-program-on-startup/all][here]]. Here's an article on how to create and manage [[https://www.baeldung.com/linux/systemd-create-user-services][user‚Äôs services With systemd]].

#+begin_src toml
# /lib/systemd/system/clock.service
  [Unit]
  Description=Start Clock

  [Service]
  Environment=DISPLAY=:0
  Environment=XAUTHORITY=/home/pi/.Xauthority
  ExecStart=/usr/bin/python3 /home/pi/clock.py
  Restart=always
  RestartSec=10s
  KillMode=process
  TimeoutSec=infinity

  [Install]
  WantedBy=graphical.target
#+end_src

Clear journalctl

The self maintenance method is to vacuum the logs by size or time. Retain only the past two days:

#+begin_src sh
journalctl --vacuum-time=2d
#+end_src

or retain only the past 500 MB

#+begin_src sh
journalctl --vacuum-size=500M
#+end_src

* MacOS
** Reset DNS cache on Macos

Taken from [[https://www.lifewire.com/flush-dns-cache-on-a-mac-5209298][this article]].

#+begin_src shell
  sudo dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
#+end_src

** Let QuickPlayer to autoplay on open

Taken from this [[https://osxdaily.com/2009/09/03/autoplay-quicktime-movies-on-open-and-5-other-useful-quicktime-x-hacks/][Osx Daily post]]. ‚ö†Ô∏è /it seems not working on my Mac/ ü§î 

#+begin_src sh
defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen 1
#+end_src

* FFMPEG

** Extract audio from video
#+begin_example shell
ffmpeg -i infile.mp4 -vn -acodec copy outfile.ogg
#+end_example

#+RESULTS:

** Cut audio/videos starting from 10s from the beginning for 20s.

#+BEGIN_EXAMPLE sh
ffmpeg -ss 10 -t 20 -i infile.wav outfule.wav
#+END_EXAMPLE

Another example using timing

#+begin_example
ffmpeg -ss 00:00:15.00 -i in.mp4 -t 00:00:10.00 -c copy out.mp4
#+end_example

** Adjust volume

If we want our volume to be half of the input volume:
#+BEGIN_EXAMPLE 
ffmpeg -i input.wav -filter:a "volume=0.5" output.wav
#+END_EXAMPLE

150% of current volume:
#+BEGIN_EXAMPLE 
ffmpeg -i input.wav -filter:a "volume=1.5" output.wav
#+END_EXAMPLE

You can also use decibel measures. To increase the volume by 10dB:
#+BEGIN_EXAMPLE 
ffmpeg -i input.wav -filter:a "volume=10dB" output.wav
#+END_EXAMPLE

** Speeding up/slowing down video:

The filter works by changing the presentation timestamp (PTS) of each
video frame. For example, if there are two succesive frames shown at
timestamps 1 and 2, and you want to speed up the video, those
timestamps need to become 0.5 and 1, respectively. Thus, we have to
multiply them by 0.5.

To double the speed of the video, you can use:
#+BEGIN_EXAMPLE sh
ffmpeg -i input.mkv -filter:v "setpts=0.5*PTS" output.mkv
#+END_EXAMPLE

To slow down your video, you have to use a multiplier greater than 1:
#+BEGIN_EXAMPLE sh
ffmpeg -i input.mkv -filter:v "setpts=2.0*PTS" output.mkv
#+END_EXAMPLE

For audio I found this

#+begin_src sh
ffmpeg -i input.wav -filter:a "atempo=0.75" output.mp3 
#+end_src
** Concat audio/videos starting from a list of files

#+BEGIN_EXAMPLE sh
ffmpeg -f concat -i list-of-files.txt -c copy outfile.wav
#+END_EXAMPLE

The ~list-of-files.txt~ should be something like this:

#+begin_example
file './infile.wav'
file './infile.wav'
file './infile.wav'
file './infile.wav'
file './infile.wav'
file './infile.wav'
#+end_example

**N.B.** you could see the error 'Unsafe filename..Operation not permitted'; as reported in [[https://stackoverflow.com/questions/38996925/ffmpeg-concat-unsafe-file-name][this SO thread]] you could solve this issue by using single quotes in the list of filenames, avoiding any ~~~ or other /"strange"/ chars.

** Extract single frame

Extract a single frame at time 10s (also consider using ~accurate_seek~ argument).

#+begin_example shell
ffmpeg -i vid.mp4 -ss 10 -frames:v 1 thumb.png
#+end_example

Extract a frame each minute.

#+begin_example shell
ffmpeg -i vid.mp4 -vf fps=1/60 thumb%03d.png
#+end_example

** Extract scenes

Extract scenes! You'll receive an output with some lines starting with ~Parsed_showinfo~.

#+begin_src sh
  ffmpeg -i source.mp4 -filter:v "select='gt(scene,0.4)',showinfo" -f null - 2>&1
#+end_src

** Change sample rate

Converts a.wav to MPEG audio at 22050 Hz sample rate.

#+begin_example sh
  ffmpeg -i /tmp/a.wav -ar 22050 /tmp/a.mp2
#+end_example
** Edit ID3 Tags

You can follow [[https://gist.github.com/eyecatchup/0757b3d8b989fe433979db2ea7d95a01][this gist]].
#+begin_example sh
  ffmpeg -i file.mp3 -metadata title="Track Title" -metadata artist="The artist" -metadata album="Album name" out.mp3
#+end_example
** Capture audio

Taken from [[https://trac.ffmpeg.org/wiki/Capture/Desktop][FFMPEG doc]]

**** Linux
Use the x11grab device:

#+begin_src sh
ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 output.mp4
#+end_src
This will grab the image from desktop, starting with the upper-left corner at x=100, y=200 with a width and height of 1024‚®â768.

If you need audio too, you can use ALSA (see Capture/ALSA for more info):

#+begin_src sh
ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f alsa -ac 2 -i hw:0 output.mkv
#+end_src

Or the pulse input device (see Capture/PulseAudio for more info):

#+begin_src sh
ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f pulse -ac 2 -i default output.mkv
#+end_src

***** macOS
Use the avfoundation device:

#+begin_src sh
ffmpeg -f avfoundation -list_devices true -i ""
#+end_src

#+RESULTS:

This will enumerate all the available input devices including screens ready to be captured.

Once you've figured out the device index corresponding to the screen to be captured, use:

#+begin_src sh
ffmpeg -f avfoundation -i "<screen device index>:<audio device index>" output.mkv
#+end_src

This will capture the screen from <screen device index> and audio from <audio device index> into the output file output.mkv.

To capture only audio, something like this:

#+begin_src sh
ffmpeg -f avfoundation -i ":default" output.wav
#+end_src

* Makefile

- https://makefiletutorial.com/

A sample of makefile usefull for /day-to-day/ development: fetch the remote repo (=sync=) avoiding to digit the ssh passowrd everytime (=sshadd=)

#+begin_src makefile
  sync:
          git fetch
          git pull origin master
  sshadd:
          eval `ssh-agent -s`
          ssh-add
#+end_src

* GPG and SSH
** Keep GnuPG credentials cached for entire user session

For GnuPG 2.1 and below edit user configuration file at =~/.gnupg/gpg-agent.conf=. In the example below the TTL is set to 3h.

#+begin_src sh :tangle ~/.gnupg/gpg-agent.conf
default-cache-ttl 10800
max-cache-ttl 10800
#+end_src

Then restart the agent

#+begin_src sh
  gpgconf --kill gpg-agent
  gpg-agent --daemon --use-standard-socket
#+end_src

** Cache SSH keys

If you want to use SSH but tired of insert SSH key on every (for instance) git operation

#+begin_src sh
eval `ssh-agent -s`
ssh-add
#+end_src

#+begin_quote
SSH needs two things in order to use ssh-agent: an ssh-agent instance
running in the background, and an environment variable set that tells
SSH which socket it should use to connect to the agent (SSH_AUTH_SOCK
IIRC). If you just run ssh-agent then the agent will start, but SSH
will have no idea where to find it.
#+end_quote

More info in this [[https://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent][SO thread]].
