#+TITLE: Minemacs
#+AUTHOR: MinasMazar
#+EMAIL: minasmazar@gmail.com
#+DATE: <2024-08-08 Thu>
#+STARTUP: show2levels

* TODO Introduction
* Init
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/init.el
:END:

** Package initialization

#+begin_src elisp
  (add-to-list 'load-path "~/.emacs.d/vendor/") ; that's your sandbox
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")
  			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
        package-enable-at-startup t)
  (package-initialize)
#+end_src

** Main configurations

#+begin_src elisp
    (use-package emacs
      :ensure nil
      :defer
      :hook ((after-init . toggle-frame-maximized)
    	 (minibuffer-setup . (lambda ()
    			       (local-set-key (kbd "C-o") #'switch-to-completions)
    			       (local-set-key (kbd "C-n") #'switch-to-completions)
    			       (local-set-key (kbd "C-c") #'switch-to-completions))))
      :custom
      (use-short-answers t)
      (enable-recursive-minibuffers t)
      (shr-inhibit-images t)
      (initial-buffer-choice #'eshell)
      :config
      (tool-bar-mode -1)
      ;; (menu-bar-mode -1)
      (savehist-mode 1)
      (recentf-mode 1)
      (ffap-bindings)
      (fido-vertical-mode 1)

      ;; Shared configuration
      (if (file-exists-p "~/Dropbox/minemacs/")
          (setq bookmark-file "~/Dropbox/minemacs/bookmarks"
      	    eshell-aliases-file "~/Dropbox/minemacs/eshell-aliases"
      	    custom-file "~/Dropbox/minemacs/custom.el"))
      (if (file-exists-p "~/Dropbox/minemacs/org")
          (setq org-agenda-files '("~/Dropbox/minemacs/org/")
      	    org-roam-directory "~/Dropbox/minemacs/org/roam/"))

      ;; Helpers
      (defun minemacs-files-in-emacs-subdir (subdir)
        (message "Scan files in emacs subdir %s" subdir)
        (let ((scan-dir (concat user-emacs-directory (format "%s/" subdir "/"))))
          (message "Scan files in dir %s" scan-dir)
          (if (file-exists-p scan-dir)
      	  (directory-files scan-dir t directory-files-no-dot-files-regexp))))

      ;; Modules
      (defun minemacs-modules-load ()
        "Load all modules '*.el' files in './.emacs.d/modules/'"
        (interactive)
        ;; TODO: locate-dominating-file
        (let ((modules (minemacs-files-in-emacs-subdir "modules")))
          (if modules (mapcar (lambda (module)
      			    (load  module 'noerror))
      			  modules))))

      ;; Contexts
      (defun minemacs-contexts ()
        (minemacs-files-in-emacs-subdir "contexts"))

      (defun minemacs-switch-context (&optional context)
        (interactive (list (completing-read "Context: " (minemacs-contexts))))
        (load context 'noerror)
        (setq-local default-directory context)
        (hack-dir-local-variables-non-file-buffer))

      (load custom-file 'noerror)
      (minemacs-modules-load)
      :bind
      (("s-k" . #'execute-extended-command)
       ("s--" . #'bookmark-jump)
       ("s-)" . #'kill-current-buffer)
       ("s-[" . #'previous-buffer)
       ("s-]" . #'next-buffer)
       ("s-N" . #'dired-jump)
       ("s-e" . #'dabbrev-expand)
       ("s-r" . #'repeat)
       ("s-w" . #'other-window)
       ("s-1" . #'delete-other-windows)
       ("s-2" . #'split-window-below)
       ("s-3" . #'split-window-right)
       ("s-0" . #'delete-window)
       :map key-translation-map
       ("s-m" . "\C-x")
       ("s-M" . "\C-c")
       :map isearch-mode-map
       ("C-p" . #'isearch-repeat-backward)
       ("C-n" . #'isearch-repeat-forward)
       ("<tab>" . #'isearch-repeat-forward)
       ("<S-tab>" . #'isearch-repeat-backward)
       :map completion-list-mode-map
       ("e" . #'switch-to-minibuffer)))
#+end_src

** Modal editing

#+begin_src elisp
  (use-package god-mode
    :ensure t
    :init
    (defun minemacs-god-mode-disabled ()
      (setq cursor-type 'bar))

    (defun minemacs-god-mode-enabled ()
      (setq cursor-type 'box))

    :hook ((god-mode-enabled . minemacs-god-mode-enabled)
    	 (god-mode-disabled . minemacs-god-mode-disabled))
    :bind
    (("s-n" . #'god-local-mode)
     :map god-local-mode-map
     ("i" . #'god-local-mode)
     ("u" . #'undo)
     ("U" . #'redo)
     ("[" . #'backward-paragraph)
     ("]" . #'forward-paragraph))
    :config
    (god-mode-all 1))
#+end_src

** Org

#+begin_src elisp
  (setq org-agenda-custom-commands
        '(("p" "Planning" tags-todo "+@planning")
  	("u" "Untagged" tags-todo "-{.*}")))
#+end_src

* Modules
** Auto-completion
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/modules/autocomplete.el :mkdirp yes
:END:

#+begin_src elisp
  (use-package corfu
    :hook
    (eshell-mode . (lambda ()
		     (setq-local corfu-auto nil)
		     (corfu-mode)))
    :custom
    (corfu-cycle t)
    :config
    (global-corfu-mode))
#+end_src

#+begin_src elisp
  (use-package cape
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-history)
    ;;(add-hook 'completion-at-point-functions #'cape-keyword)
    ;;(add-hook 'completion-at-point-functions #'cape-tex)
    ;;(add-hook 'completion-at-point-functions #'cape-sgml)
    ;;(add-hook 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-hook 'completion-at-point-functions #'cape-abbrev)
    ;;(add-hook 'completion-at-point-functions #'cape-dict)
    ;;(add-hook 'completion-at-point-functions #'cape-elisp-symbol)
    (add-hook 'completion-at-point-functions #'cape-line))
#+end_src

** Hydra
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/modules/hydra.el :mkdirp yes
:END:

#+begin_src elisp
  (use-package hydra
    :ensure t
    :init

    (defun send-key(key)
      (setq unread-command-events (listify-key-sequence key)))

    :config
    (defhydra hydra-modal (:color pink
    			     :pre (setq cursor-type 'box)
    			     :post (setq cursor-type 'bar))
  	    "hydra-move:"
  	    ("w" #'kill-ring-save "w")
  	    ("n" #'next-line "n")
  	    ("p" #'previous-line "p")
  	    ("k" #'kill-buffer "k")
  	    ("K" #'kill-line "K")
  	    ("]" #'scroll-up-command "]")
  	    ("[" #'scroll-down-command "[")
  	    ("<" #'beginning-of-buffer "<")
  	    ("o" #'other-window "o")
  	    ("b" #'switch-to-buffer "b")
  	    (">" #'end-of-buffer ">")
  	    ("u" #'undo "undo")
  	    ("2" #'split-window-below "2")
  	    ("0" #'delete-window "0")
  	    ("1" #'delete-other-windows "1")
  	    ("i" nil "quit"))

    (defhydra hydra-kommand (:color teal
                                    :pre (setq cursor-type 'box)
                                    :post (setq cursor-type 'bar))
  	    "hydra-kommand"
  	    ("k" #'execute-extended-command "ðŸš€ Kommand")
  	    ("m" #'hydra-modal/body "modal")
  	    ("p" (lambda () (interactive) (send-key "\M-p")) "M-p")
  	    ("n" (lambda () (interactive) (send-key "\M-n")) "M-n")
  	    ("e" #'eval-defun "Î› eval-defun")
  	    ("l" #'god-mode "ðŸ‘¼ god")
  	    ("r" #'repeat "repeat")
  	    ("x" #'dabbrev-expand "expand")
  	    ("b" #'ibuffer "ðŸ§° ibuffer")
  	    ("j" #'bookmark-jump "ðŸ”– bookmark")
  	    ("a" #'org-agenda)
  	    ("q" nil "_q_uit"))
    :bind
    (("s-o" . #'hydra-kommand/body)
     ("s-l" . #'hydra-modal/body)))
#+end_src

** Embark
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/modules/embark.el :mkdirp yes
:END:

#+begin_src elisp
  (use-package embark
    :after god-mode
    :config
    (add-to-list 'god-exempt-major-modes 'embark-mode)
    :bind*
    ("C-," . embark-act)
    (:map embark-general-map
  	  ("C-w" . browse-url))
    (:map embark-identifier-map
  	  ("R" . query-replace)
  	  ("O" . multi-occur-in-matching-buffers)
  	  ("c" . browse-url-chrome)
  	  ("f" . browse-url-firefox))
    (:map embark-url-map
  	  ("c" . browse-url-chrome)
  	  ("f" . browse-url-firefox))
    (:map  embark-file-map
  	   ("p" . project-find-file)
  	   ("b" . project-switch-to-buffer)
  	   ("," . append-to-previous-buffer)))
#+end_src

