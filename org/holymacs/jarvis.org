#+TITLE: Holymacs ~ Jarvis module
#+AUTHOR: MinasMazar
#+EMAIL: minasmazar@gmail.com
#+DATE: <2024-04-20 Sat>
#+PROPERTY: header-args :tangle ~/.emacs.d/modules/jarvis.el :mkdirp yes
#+SETUPFILE: ../../templates/_header.org
#+HTML_LINK_UP: ../holymacs.html

* Jarvis

Preview the HTML exported buffer you see when exporting an org file in a preview using some built-in Emacs function.

#+begin_src elisp
  (advice-add #'org-html-export-as-html :filter-return #'browse-url-of-buffer)
#+end_src

There's too silence here.. üò± let's just play something! ü§ò

#+begin_src elisp
    (defcustom holymacs-jarvis-youtube-sources
      '("https://www.youtube.com/watch?v=6-HDYLJZWGs")
      "List of some Youtube videos; `holymacs-jarvis-play-youtube` will pick one of them, randomly, and open it"
      :type '(repeat :tag "URLs" (string)))

    (defun holymacs-jarvis-play-youtube (&optional url)
      "Randomly pick one of the videos defined in `holymacs-jarvis-youtube-sources` and then play it."
      (interactive (list (completing-read "URL: " holymacs-jarvis-youtube-sources)))
      (let ((command (format "mpv \"%s\"" url))
    	(buffer-name (format "MPV: %s" url)))
        (async-shell-command command buffer-name)))
#+end_src

* Tabspaces

#+begin_src elisp
  (use-package tabspaces
    :hook (after-init . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace
  	       tabspaces-open-or-create-project-and-workspace)
    :bind
    (("s-{" . tab-previous)
     ("s-}" . tab-next))
    :custom
    (tabspaces-keymap-prefix "M-o w")
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-initialize-project-with-todo t)
    (tabspaces-todo-file-name "project-todo.org")
    ;; I don't want tabspaces to manage sessions, so I keep those lines commented out.
    ;; (tabspaces-session t)
    ;; (tabspaces-session-auto-restore t))
    )
#+end_src

* COMMENT Pop terminal ‚ö†Ô∏è wip ‚ö†Ô∏è

#+begin_src elisp
  (use-package popper
    :bind (("s-~"   . popper-toggle)
	   ("s-`"   . popper-cycle)
	   ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
	  '(shell-mode
	    eshell-mode
	    "Output\\*$"
	    "\\*Async Shell Command\\*"
	    help-mode
	    compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src
* Focus current window

#+begin_src elisp
  (use-package golden-ratio
    :bind
    (("M-o W" . #'golden-ratio-mode)))
#+end_src

* COMMENT HTTP Client

#+begin_src elisp
(use-package request)
#+end_src

Example usage

#+begin_example
(request "http://httpbin.org/get"
  :params '(("key" . "value") ("key2" . "value2"))
  :parser 'json-read
  :success (cl-function
            (lambda (&key data &allow-other-keys)
              (message "I sent: %S" (assoc-default 'args data)))))
#+end_example

* COMMENT Emacs Async

#+begin_src elisp
  (use-package emacs-async)
#+end_src

#+begin_example elisp
  (async-start (lambda () (sleep-for 3)) (lambda (ff) (message "done")))
#+end_example

* Org and Second Brain ([[https://www.orgroam.com/][Org-roam]])

Add a capture template to store notes in =inbox=

#+begin_src elisp
  (use-package org
    :config
    (require 'org-capture)
    (add-to-list 'org-capture-templates
  		 '("i" "Inbox" entry (file+headline "~/Dropbox/org/inbox.org" "Inbox")
  		    "* TODO %?\n %i\n  %a"))
    :bind
    (:map org-mode-map
  	  ("M-p" . #'org-move-subtree-up)
  	  ("M-n" . #'org-move-subtree-down)))
#+end_src

#+begin_src elisp
(use-package org-roam
  :bind
  (("M-o r f" . #'org-roam-node-find)))
#+end_src

* COMMENT Autoinsert and templates ‚ö†Ô∏è wip ‚ö†Ô∏è

Emacs has some built-in functionalities to /auto insert/ text (expand text or via templates)
- =auto-insert=
- =abbrev=
- =skeleton=

Also there are some external packages
- =yasnippet=
- =tempo=
  
* COMMENT From elfeed to gemlog - ‚ö†Ô∏è wip ‚ö†Ô∏è

#+begin_src elisp
  (defun jarvis-elfeed-entry-to-gmi ()
    "Export the current elfeed article content to a gemlog entry (a blog, but in Gemini protocol")
    (interactive)
    (let* ((content (buffer-string))
	   (org-capture-templates '(("E" "Gemlog entry" plain (file+regexp "~/minasmazar-capsule/log.gmi" "^# ") "\n\n# %U\n\n%i\n\n" :prepend t))))
      (set-mark (point-min))
      (goto-char (point-max))
      (activate-mark)
      (org-capture)))
#+end_src

* Alarm!

#+begin_src elisp
  (use-package alarm-clock
    :config
    (defun holymacs/jarvis/set-alarm-10min-fire! ()
      (interactive)
      (alarm-clock-set "10min" "FIRE!"))
    :bind
    ("M-o ! 1" . #'holymacs/jarvis/set-alarm-10min-fire!))
#+end_src

* News and Mail
** RSS Reader (elfeed)

#+begin_src elisp
  (use-package elfeed
    :after 'god-mode
    :bind
    (:map elfeed-search-mode-map ("U" . (lambda () (interactive) (run-at-time "10min" t #'elfeed-update))))
    :config
    (add-to-list 'god-exempt-major-modes 'elfeed-search-mode-map))
#+end_src

Enanche your elfeed experience with [[https://github.com/karthink/elfeed-tube][elfeed-tube]]! ‚ù§Ô∏è Thanks a lot to [[https://github.com/karthink][karthink]] üôè

#+begin_src elisp
  (use-package elfeed-tube
    :after elfeed
    :demand t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
		("F" . elfeed-tube-fetch)
		([remap save-buffer] . elfeed-tube-save)
		:map elfeed-search-mode-map
		("F" . elfeed-tube-fetch)
		([remap save-buffer] . elfeed-tube-save)))

  (use-package elfeed-tube-mpv
    :after elfeed-tube
    :bind (:map elfeed-show-mode-map
		("C-c C-f" . elfeed-tube-mpv-follow-mode)
		("C-c C-w" . elfeed-tube-mpv-where)))
#+end_src

** Mu4e
*** Dependencies

Firstly, install =mu= and a MailBox <-> Imaps syncronizer like =mbsync=. You should also rely on =pass=, the [[https://www.passwordstore.org/][the standard unix password manager]], in order to store and fetch your passwords in a secure way.

Useful links:
- http://frostyx.cz/posts/synchronize-your-2fa-gmail-with-mbsync
- https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html
- https://isync.sourceforge.io/mbsync.html

*** Configuration

#+begin_example toml
  IMAPAccount gmail-imaps
  Host imap.gmail.com
  Port 993
  #UseIMAPS yes
  #RequireSSl yes
  SSLType IMAPS
  SSLVersions TLSv1.2
  AuthMechs PLAIN
  User your-email@gmail.com
  #Pass supercomplicatedpassword
  PassCmd "pass gmail/imaps"

  IMAPStore gmail-remote
  Account gmail-imaps

  MaildirStore gmail-local
  Path ~/MailDir/gmail/
  Inbox ~/MailDir/gmail/INBOX
  Subfolders Verbatim

  Channel gmail
  #Master :gmail-remote:
  #Slave :gmail-local:
  Far :gmail-remote:
  Near :gmail-local:
  Create Both
  Expunge Both
  Patterns *
  SyncState *
#+end_example

#+begin_example emacs-lisp
  (require 'mu4e)
  (setq send-mail-function 'smtpmail-send-it
	message-send-mail-function 'smtpmail-send-it
	mu4e-get-mail-command "mbsync -a"
	;;mu4e-maildir "~/Mail"
	mu4e-update-interval (* 60 10)
	smtpmail-default-smtp-server "smtp.gmail.com"
	smtpmail-smtp-server "smtp.gmail.com"
	;;smtpmail-stream-type 'ssl
	;;smtpmail-smtp-service 465
	smtpmail-stream-type 'starttls
	smtpmail-smtp-service 587
	;;smtpmail-use-gnutls t
	mu4e-drafts-folder "/[Gmail].Drafts"
	mu4e-sent-folder   "/[Gmail].Sent Mail"
	mu4e-trash-folder  "/[Gmail].Trash"
	mm-discouraged-alternatives '("text/html")
	mml-secure-openpgp-signers '("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)
  (auth-source-pass-enable)
  (setq smtpmail-debug-info t)
#+end_example

To set multiple accounts within =mu4e= you have to set the =mu4e-contexts= variable. An interesting screencast/article from System Crafters about that can be found [[https://systemcrafters.net/emacs-mail/managing-multiple-accounts/][here]].

#+begin_example elisp
  (setq mu4e-contexts
	(list
	 ;; Work account
	 (make-mu4e-context
	  :name "GMail"
	  :match-func
	  (lambda (msg)
	    (when msg
	      (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "my-email@gmail.com")
		  (user-full-name    . "My-Email (Gmail)")
		  (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
		  (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
		  (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

	 ;; Personal account
	 (make-mu4e-context
	  :name "Yahoo"
	  :match-func
	  (lambda (msg)
	    (when msg
	      (string-prefix-p "/Yahoo" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "my-email@yahoo.com")
		  (user-full-name    . "My-Email (Yahoo)")
		  (mu4e-drafts-folder  . "/Yahoo/Drafts")
		  (mu4e-sent-folder  . "/Yahoo/Sent")
		  (mu4e-refile-folder  . "/Yahoo/Archive")
		  (mu4e-trash-folder  . "/Yahoo/Trash")))))
#+end_example

** COMMENT Gnus ‚ö†Ô∏è wip ‚ö†Ô∏è

To configure gnus in order to read your Gmail, you have to:

- create a password token on the Gmail account
- enter an authentication line in your =authinfo=

#+begin_export ascii
  machine imap.gmail.com login your-email@gmai.com password "GENERATED-TOKEN" port imaps
#+end_export

Then configure the =gnus-select-method=

#+begin_example elisp
  (setq gnus-select-method
	'(nnimap "gmail"
		 (nnimap-address "imap.gmail.com")
		 (nnimap-server-port "imaps")
		 (nnimap-stream ssl)))
#+end_example

* Media

#+begin_src elisp
  (use-package bongo)
#+end_src

* Search on the web: engine-mode
#+begin_src elisp
  (use-package engine-mode
    :init
    (setq engine/browser-function #'browse-url-firefox)
    :config
    (defun engine/execute-search (search-engine-url browser-function search-term)
      "Display the results of the query."
      (interactive)
      (let ((browse-url-handlers nil)
	    (browse-url-browser-function browser-function))
	(browse-url
	 (format-spec search-engine-url
		      (format-spec-make ?s (url-hexify-string search-term))))))

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :browser 'eww-browse-url
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "h")

    (defengine google
      "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :browser 'browse-url-firefox
      :keybinding "g")

    (defengine google-images
      "https://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
      :keybinding "i")

    (defengine google-maps
      "https://maps.google.com/maps?q=%s"
      :docstring "Google Maps"
      :keybinding "m")

    (defengine google-maps
      "https://www.openstreetmap.org/search?query=%s"
      :docstring "OpenStreetMap"
      :keybinding "M")

    (defengine google-translate-to-it
      "https://translate.google.it/?sl=auto&tl=it&text=%s&op=translate"
      :docstring "Translate to IT"
      :keybinding "t")

    (defengine google-translate-to-en
      "https://translate.google.it/?sl=it&tl=en&text=%s&op=translate"
      :docstring "Translate from IT to English"
      :browser 'browse-url-firefox
      :keybinding "T")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (defengine wikipedia
      "https://www.wikipedia.org/search-redirect.php?language=it&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis."
      :browser 'eww-browse-url)

    (defengine youtube
      "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")

    (defengine amazon
      "https://www.amazon.it/s/ref=nb_sb_noss?&field-keywords=%s"
      :browser 'browse-url-firefox
      :keybinding "a")

    (defengine cap
      "https://www.nonsolocap.it/cap?k=%s&c=pescara"
      :browser 'browse-url-firefox
      :keybinding "C")

    (engine-mode t))
#+end_src
