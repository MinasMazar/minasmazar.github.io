#+TITLE: Holymacs ~ IDE
#+AUTHOR: MinasMazar
#+EMAIL: minasmazar@gmail.com
#+DATE: <2024-04-20 Sat>
#+PROPERTY: header-args :tangle ~/.emacs.d/modules/ide.el :mkdirp yes
#+SETUPFILE: ../../templates/_header.org
#+STARTUP: show2levels
#+HTML_LINK_UP: ../holymacs.html

* Versioning

#+begin_src elisp
  (use-package magit
  :bind
  (("C-x g" . #'magit-status)))
#+end_src

* Docker

#+begin_src elisp
  (use-package docker)
  (use-package dockerfile-mode)
  (use-package docker-compose-mode)
#+end_src

* Workspaces

#+begin_src elisp
  (use-package tabspaces
    :hook (after-init . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace
  	       tabspaces-open-or-create-project-and-workspace)
    :bind
    (("s-{" . tab-previous)
     ("s-}" . tab-next))
    :custom
    (tabspaces-keymap-prefix "M-o w")
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-initialize-project-with-todo t)
    (tabspaces-todo-file-name "project-todo.org")
    ;; I don't want tabspaces to manage sessions, so I keep those lines commented out.
    ;; (tabspaces-session t)
    ;; (tabspaces-session-auto-restore t))
    )
#+end_src

* Programming languages
** Elixir

#+begin_src elisp
  (use-package elixir-mode)
  (use-package exunit
    :hook
    (elixir-mode . exunit-mode))
  ;; Alchemist seems to be outdated and not more maintained
  ;; (use-package alchemist
  ;;   :config
  ;;   (add-to-list 'god-exempt-major-modes 'alchemist-test-report-mode))
#+end_src

Elixir Livebooks are Markdown files with =.livemd= extension. Let's handle them!

#+begin_src elisp
  (add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\|livemd\\)\\'" . markdown-mode))
#+end_src

** LSP

#+begin_src elisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(elixir-mode "~/.emacs.d/elixir-ls/release/language_server.sh")))
#+end_src

*** Elixir

Code stolen from [[https://jeffkreeftmeijer.com/emacs-eglot-elixir-ls/][this blogpost]] (thanks [[https://github.com/jeffkreeftmeijer][Jeff Kreeftmeijer]]!)

#+begin_src sh :tangle no
  git clone git@github.com:elixir-lsp/elixir-ls.git ~/.emacs.d/elixir-ls
  cd ~/.emacs.d/elixir-ls
  mix deps.get
  mix elixir_ls.release
#+end_src

* Markup languages
** Markdown

#+begin_src elisp
  (use-package markdown-mode)
#+end_src

* Project management
** Run make on list of projects

#+begin_src elisp
  (defcustom minemacs-projects '() "Project list" :type '(repeat :tag "Projects" (string :tag "Path")))

  (defun minemacs-projects-make (&optional task)
    (interactive (list (completing-read "Task: " '("dev" "run" "usage"))))
    (mapcar
     (lambda (project)
       (delete-other-windows)
       (let ((split-dir :below)
  	   (command (format "make %s" task))
  	   (buffer-name (format "Project: <%s>" project))
  	   (default-directory project))
         (async-shell-command (format "cd %s && %s" project command) buffer-name)
         (pop-to-buffer buffer-name)
         (if (eq split-dir :below)
  	   (progn (split-window-below) (setq split-dir :right))
  	 (progn (split-window-right) (setq split-dir :below)))
         (balance-windows)))
     minemacs-projects))
#+end_src

* Focusing

#+begin_src elisp
  (use-package golden-ratio
    :bind
    (("M-o W" . #'golden-ratio-mode)))
#+end_src

* Terminal emulator
** Vterm

Here install =vterm= and some  useful functions to ease interaction with *Tmux*.

#+begin_src elisp
  (use-package vterm
    :after god-mode
    :config
    (add-to-list 'god-exempt-major-modes 'vterm-mode)

    (defun holymacs-vterm-exec (command)
      (interactive "sCommand: ")
      (let ((buffer-name (format "*vterm <%s>*" command)))
        (with-current-buffer (vterm buffer-name)
  	(vterm-send-string (format "%s && exit\n" command)))))

    (defun holymacs-tmux/open ()
      (interactive)
      (holymacs-vterm-exec "tmux attach || tmux")))
#+end_src
