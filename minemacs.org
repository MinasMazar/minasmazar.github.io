#+TITLE: MinasMazar's blog ~ Minemacs
#+AUTHOR: MinasMazar
#+EMAIL: minasmazar@gmail.com
#+DATE: <2023-07-15 Sat>
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :mkdirp yes
#+STARTUP: show2levels
#+OPTIONS: toc:t

* Introduction

This is my Emacs configuration and aims to be as minimal as possible, trying to adhere Emacs standards and being more vanilla as possible.
It also consists in a literate configuration file.

* User information

Remember to set my name and email address! You can use the standard Emacs customization.

#+begin_example emacs-lisp
  (setq user-full-name "Your username"
        user-mail-address "username@domain.net")
#+end_example

* Package Manager

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/manual-packages/")
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
	package-enable-at-startup t)
  (package-initialize)
#+end_src

* Minemacs layer

#+begin_src emacs-lisp
  (setq minemacs-dir "~/minasmazar.github.io/")

  (defun minemacs-pathname (&rest pathnames)
    "Returns the path of the given pathname within the minemacs dir"
    (string-join (append (list minemacs-dir) pathnames) "/"))

  (defun minemacs-config-file ()
    "Returns the path of the minemacs config file (i.e. this file)"
    (minemacs-pathname "minemacs.org"))

  (defun minemacs/org-babel-load-file (&optional file)
    (interactive "bBuffer: ")
    (org-babel-load-file file))
#+end_src

* Main settings

Performance tweaking for modern machines

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))
#+end_src

#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg")
        auto-save-file-name-transforms `((".", "~/.emacs-saves" t))
        backup-inhibited t ;; seems not working, so next line is needed
        calendar-mark-diary-entries-flag t
        completion-auto-select t
        completion-ignore-case t
        read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        epa-pinentry-mode 'loopback
        global-auto-revert-non-file-bufffers t
        indent-tabs-mode nil
        initial-buffer-choice 'eshell
        make-backup-files nil
        org-agenda-include-diary t
        ring-bell-function 'ignore
        shr-inhibit-images t
        tab-always-indent 'complete
        use-dialog-box nil
        visible-bell nil
        auto-save-default nil)
#+end_src

* Appearance
** Window settings

Disable bars.
 
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Window placement. Thanks to [[https://protesilaos.com/codelog/2024-02-08-emacs-window-rules-display-buffer-alist/][Prot for this video]].

#+begin_src elisp
  (setq display-buffer-alist
	'(
	  ("\\*Occur\\*"
	   (display-buffer-reuse-mode-window display-buffer-below-selected)
	   (dedicated . t)
	   (body-function . (lambda (window) (select-window window))))))
#+end_src

** Transparency

#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(92 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src

** Modeline
Customize the modeline by showing the current time.

#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src

** Custom faces

A good starting point to deal with Emacs faces and theme:
- https://www.youtube.com/watch?v=qR8JRYr4BKE
- https://www.youtube.com/watch?v=1jCNrpp_STM

  #+begin_example emacs-lisp
    (set-face-attribute 'vertico-current nil :height 1.4)
  #+end_example
** Icons
#+begin_src elisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook
    (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
* Tabs, frames and sessions

The =tabspaces= session handle tab isolation unsing frames or tabs. Also, is able to store and reload active sessions. I'm still evalauting its usefulness.

#+begin_src emacs-lisp
  (use-package tabspaces
    :init
    (require 'tabspaces)
    :bind
    ("s-," . tabspaces-command-map))
#+end_src

#+begin_src elisp
  (global-set-key (kbd "s-\\") #'other-frame)
#+end_src

* [[https://orgmode.org/][Org-mode]] 🦄
** Editing and Appearance

This are some shotctus I like to have in place to easily rearrange paragaphs in =org-mode=. 

#+begin_src emacs-lisp
  (require 'org)
  ;(define-key org-mode-map (kbd "M-p") #'org-move-subtree-up)
  ;(define-key org-mode-map (kbd "M-n") #'org-move-subtree-down)
#+end_src

Interesting packages you can try to improve your =org-mode= experience (you can just ~C-h P~ on the package name for more info ;) )

#+begin_src emacs-lisp
  (use-package olivetti :after org)
#+end_src

Here's some useful resources; both blogs are really cool 🕺 and realized through Hugo.

- https://zzamboni.org/post/beautifying-org-mode-in-emacs/ uses [[https://ox-hugo.scripter.co/][ox-hugo]]
- https://sophiebos.io/posts/beautifying-emacs-org-mode/ uses [[https://github.com/adityatelange/hugo-PaperMod/][Hugo PaperMod]]

As mentioned in the first link, =spacemacs-theme= has a good look 'n feel for *org* buffers. If you don't like it, just comment-in those lines, so it won't be downloaded.

#+begin_src emacs-lisp
  (use-package spacemacs-theme)
#+end_src

Another good theme optimized for =org-mode= is [[https://github.com/fniessen/emacs-leuven-theme][leuven]].

** Agenda and diary

A good starting point, apart from the official documentation or worg, is [[https://www.johnborwick.com/2019/02/23/org-todo-setup.html][this post]].

Get diary and agenda files from my Dropbox.

#+begin_src emacs-lisp
  (setq diary-file "~/Dropbox/org/diary"
	org-agenda-files '("~/Dropbox/org/")
	org-default-notes-file "~/Dropbox/org/inbox" 
	org-todo-keywords '((sequence "TODO" "IN PROGRESS" "|" "DONE")))
#+end_src

** Capture and templates

Here's an example of ~org-capture-templates~.

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-capture-templates
	  '(("t" "todo" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
	     "* TODO %?\n %i\n  %a")
	    ("b" "bookmark" entry (file "~/Dropbox/org/bookmarks.org")
	     "* %?\n\n %a" :prepend t)
	    ("j" "journal" entry (file+datetree "~/Dropbox/org/journal.org")
	     "* %?\nEntered on %U\n %i\n %a" :jump-to-captured t))
	    org-agenda-custom-commands
	    '(("w" "Work" tags "work"))))
#+end_src

** Blorg ~ let's blog with org-mode!
:PROPERTIES:
:CUSTOM_ID: blorg-section
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/blorg.el
:END:

You can write your own blog using ~org~ pages and exports it using ~org-publish~ feature. The package =ox-rss= is needed if you want to generate a RSS (it exports the ~org-rss-publish-to-rss~ function). Include the [[https://git.sr.ht/~abrahms/ox-gemini][=ox-gemini=]] package if you want to export your org files also in the =.gmi= format in order to deploy your blog as a [[https://gemini.circumlunar.space/][gemini capsule]]. It provides the =org-gemini-publish-to-gemini=. Useful resources:

- [[https://orgmode.org/][org-mode]]
- [[https://github.com/fniessen/org-html-themes]]
- https://pavpanchekha.com/blog/org-mode-publish.html
- https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html#coderef-html-foreword

#+begin_src emacs-lisp
  (use-package ox-rss)
  (use-package ox-gemini)

  (mapcar (lambda (project)
	    (add-to-list 'org-publish-project-alist project))
	  '(
	    ("blorg:static"
	     :base-directory "~/minasmazar.github.io/"
	     :base-extension ".*"
	     :publishing-directory "~/minasmazar.github.io/"
	     :recursive t
	     :publishing-function org-publish-attachment)
	    ("blorg:org"
	     :recursive t
	     :base-directory "~/minasmazar.github.io/"
	     :base-extension "org"
	     :publishing-function org-html-publish-to-html
	     :publishing-directory "~/minasmazar.github.io/"
	     :with-author nil
	     :with-creator t
	     :with-toc t
	     :html-link-up "/"
	     :html-link-home "/"
	     ;; :html-preamble minemacs-blorg-html-preamble
	     :section-numbers nil
	     :time-stamp-file nil)
	    ("blorg:publish"
	     :base-directory "~/minasmazar.github.io/"
	     :publishing-directory "~/minasmazar.github.io/"
	     :base-extension "any"
	     :publishing-function org-publish-attachment
	     :exclude ".*"
	     :completion-function minemacs-blorg-autopublish)
	    ("blorg"
	     :components ("blorg:static" "blorg:org" "blorg:publish"))))
#+end_src

Now define some handy =org-capture= templates!

#+begin_src elisp
  (mapcar (lambda (entry) (add-to-list 'org-capture-templates entry))
	  '(("B" "Blorg: bookmark" entry (file "~/minasmazar.github.io/pages/bookmarks.org")
	     "* %?\n\n %a" :prepend t)
	    ("J" "Blorg: journal" entry (file+datetree "~/minasmazar.github.io/pages/journal.org")
	     "* %?\nEntered on %U\n %i\n %a" :jump-to-captured t)))
#+end_src

Here we define the function that uses ~git~ to publish my static site to my personal Github pages. The pre-requisite is that the destitnation directory exists and has a git repo already initialized and the remote already set up.

#+begin_src emacs-lisp
  (defcustom minemacs-blorg-autopublish nil
    "Define if autopublish feature is enabled. Used in the function =minemacs-blorg-autopublish=")

  (defun minemacs-blorg-html-preamble ()
    "<div><ul><li><a href=\"/\">Home</a></li></ul></div>")

  (defun minemacs-blorg-autopublish (options)
    (let* ((default-directory (plist-get options :publishing-directory)))
      (if minemacs-blorg-autopublish
    (minemacs-add-commit-and-push default-directory)
  (message "[blorg] autopublish simulation"))))

  (defun minemacs-add-commit-and-push (directory)
    "Add all files, commit and push"
    (cd directory)
    (let* ((commit-msg (format "Autopublish [%s]" (current-time-string)))
     (command (format "git add . ; git commit -m '%s' ; git push origin master --force" commit-msg)))
      (shell-command command)))
#+end_src

** Babel

Configuration stolen from [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-shell.html][here]].

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (eshell .t)
     (restclient . t)))
#+end_src

** Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org-roam/")))
#+end_src

** IN PROGRESS Links

Every link in =org-mode= has a prefix that define a /type/ (=img:logo.png= =file:about.org=). Every type should provide two functions for /follow/ and /export/ actions. This snippet comes from [[https://stackoverflow.com/questions/14684263/how-to-org-mode-image-absolute-path-of-export-html][this SO thread]].

#+begin_src elisp
  (defun org-custom-link-raw-relative-follow (path)
    (org-open-file-with-emacs
     (format "./%s" path)))

  (defun org-custom-link-raw-relative-export (path desc format)
    (cond
     ((eq format 'html)
      (format "<a href=\"/%s\" alt=\"%s\"/>%s</a>" path desc desc))))

  (org-add-link-type "raw-relative" 'org-custom-link-img-follow 'org-custom-link-img-export)
#+end_src

* Minibuffer and completions

 some links (prot,systemcrafters).

#+begin_src emacs-lisp
    (setq completion-styles '(initials flex)
          completion-show-help nil
          enable-recursive-minibuffers t
          completions-format 'one-column
          completions-max-height 11)

    (define-key minibuffer-local-completion-map (kbd "<tab>") #'switch-to-completions)
    ;(define-key minibuffer-local-completion-map (kbd "SPC") #'self-insert-command)
    (define-key completion-list-mode-map (kbd "e") #'switch-to-minibuffer)
    ;(define-key minibuffer-local-completion-map (kbd "C-l") #'abort-minibuffers)
    ;(define-key completion-list-mode-map (kbd "C-l") #'quit-window)
    ;(define-key completion-list-mode-map (kbd "C-j") #'choose-completion)
#+end_src

and install orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless partial-completion)))
#+end_src

If you don't like the standard Emacs completion system, you can activate =vertico-mode= or the mighty =mct=.

#+begin_src emacs-lisp :tangle no
  (use-package vertico
    :init
    (vertico-mode t)
    (setq vertico-count 20
	  vertico-resize t
	  vertico-cycle t))
#+end_src

#+begin_src elisp :tangle no
  (mct-minibuffer-mode 1)
#+end_src

Otherwise you can experiment sort of /more advanced/ UX with =helm= (remote the ~:tangle no~ to save activate in next sessions within your =init.el=).

#+begin_src emacs-lisp :tangle no
  (use-package helm
    :config
    (helm-mode 1)
    :bind
    ("M-x" . #'helm-M-x))
#+end_src

* Dired

A couple of words about dired and some links (prot,systemcrafters).

#+begin_src emacs-lisp
  (require 'dired)
  (setq dired-dwim-target t
  dired-listing-switches "-alth"
  dired-omit-files "\\`[.]?#\\|\\`[.][.]?")
  (define-key dired-mode-map (kbd "q") #'kill-this-buffer)
  (define-key dired-mode-map (kbd "M-s F") #'find-name-dired)
  (define-key dired-mode-map (kbd "W") #'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "H") #'dired-omit-mode)
  (define-key dired-mode-map (kbd "M-p") (lambda () (interactive) (dired-previous-line 1) (dired-display-file)))
  (define-key dired-mode-map (kbd "M-n") (lambda () (interactive) (dired-next-line 1) (dired-display-file)))
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode)
#+end_src

* Files and buffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f") #'find-file-at-point)
#+end_src

** Ibuffer

To occur among marked buffers in =ibuffer= press ~O~.

** Imenu

Define a matcher for =eww-mode= in order (vanilla Emacs does not priovide one). [[https://www.emacswiki.org/emacs/ImenuMode#h5o-12][This wiki]] was helpful.

#+begin_src emacs-lisp
  (setq eww-imenu-heading-expression
        '((nil "^[[:space:]]*?\\*\\(.*\\)" 1)
          (nil "^\\(\\w+\\)" 1)))

  (add-hook 'eww-mode-hook
            (lambda ()
              (setq imenu-generic-expression eww-imenu-heading-expression)))
#+end_src

In the same way, I define a matcher for =eshell= mode.

#+begin_src emacs-lisp
  (setq eshell-imenu-commands-expression
        '((nil "^~ \\$\\(.*\\)" 1)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq imenu-generic-expression eshell-imenu-commands-expression)))
#+end_src

#+begin_src emacs-lisp
  (setq minemacs/imenu-commands-expression
        '((nil "^\\([[:alnum:]]].+?\\)\n" 1)))

  (add-hook 'fundamental-mode
            (lambda ()
              (setq imenu-generic-expression minemacs/imenu-commands-expression)))
  (add-hook 'special-mode
            (lambda ()
              (setq imenu-generic-expression minemacs/imenu-commands-expression)))
#+end_src
* Contextual actions (embark)

Add some links (prot,systemcrafter).

#+begin_src emacs-lisp
  (use-package embark
    :config
    (add-to-list 'god-exempt-major-modes 'embark-mode)
    :bind*
    ("C-," . embark-act)
    (:map embark-general-map
          ("C-w" . browse-url))
    (:map embark-identifier-map
          ("R" . query-replace)
          ("O" . multi-occur-in-matching-buffers)
          ("c" . browse-url-chrome)
          ("f" . browse-url-firefox))
    (:map embark-url-map
          ("c" . browse-url-chrome)
          ("f" . browse-url-firefox))
    (:map  embark-file-map
           ("p" . project-find-file)
           ("b" . project-switch-to-buffer)
           ("," . append-to-previous-buffer)))
#+end_src

Other resources:
- [[https://jao.io/blog/embarking-videos.html][custom Embark finders/targets, from jao.io blogpost]]
- https://www.joyk.com/dig/detail/1610293147365882

* Eshell

Set eshell aliases from my Dropbox.

#+begin_src emacs-lisp
  (setq eshell-aliases-file "~/Dropbox/minemacs/eshell-aliases") 
#+end_src

This is an example of an aliases file.

#+begin_example emacs-lisp
  # a quick list of useful/useless aliases, just for demo purposes xD
  alias aliases find-file $eshell-aliases-file
  alias j (call-interactively #'bookmark-jump)
  alias q kill-this-buffer
  alias vte minemacs-vterm-exec $*
  alias ga git add .
  alias gl git log
  alias gs git status
  alias g magit-status
  alias v view-file $1
  alias aliases view-file $eshell-aliases-file
  alias l ls -lha $1
  alias d dired-jump
  alias b ibuffer
  alias rr bin/rake restart
  alias mya 'cat myfile > (switch-to-buffer "*my-buf*")'
#+end_example

Open eshell in the current directory

#+begin_src emacs-lisp
  (defun minemacs/eshell-here ()
    "Open eshell in the current directory"
    (interactive)
    (let ((dir (file-name-directory default-directory)))
      (eshell dir)))

  (defun minemacs-eshell-load-local-source ()
    (let* ((source-file (concat default-directory ".source.esh")))
      (if (file-exists-p source-file)
	  (eshell/source source-file 'noerror))))

  (add-hook 'eshell-directory-change-hook 'minemacs-eshell-load-local-source)
#+end_src

[[https://howardism.org/Technical/Emacs/eshell-present.html][Here's an interesting article on Eshell]].

* Editing settings

#+begin_src emacs-lisp
  (show-paren-mode 1)
  (repeat-mode 1)
#+end_src

* History

#+begin_src emacs-lisp
  (savehist-mode 1)
  (recentf-mode 1)
#+end_src

* Project

#+begin_src emacs-lisp
  (require 'project)
  (setq project-switch-commands
	'((project-find-file "Find file" "f")
	  (project-find-regexp "Find regexp" "t")
	  (project-eshell "Eshell" "e")
	  (project-shell "Shell" "s")
	  (magit-dispatch "Magit" "m")))
#+end_src

It’s not super clear to me, but I found that using =project-switch-project= does not work as expected for all functions. This override solve the issue (it just set also the =default-directory= along with =project-current-directory-override=).

 #+begin_src emacs-lisp
   (defun project-switch-project (dir)
     "\"Switch\" to another project by running an Emacs command.
   The available commands are presented as a dispatch menu
   made from `project-switch-commands'.

   When called in a program, it will use the project corresponding
   to directory DIR."
     (interactive (list (project-prompt-project-dir)))
     (let ((command (if (symbolp project-switch-commands)
			project-switch-commands
		      (project--switch-project-command))))
       (let ((project-current-directory-override dir)
	     (default-directory dir))
	 (call-interactively command))))
 #+end_src

* Autocompletion

Uses company package (or Corfu?)

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+end_src

* Modifier keys, keybindings, shortcuts
** Custom keybindings
*** For not graphical client (i.e. emacs -nw)

Usually when you run Emacs in terminal (no graphic), you don't have access to the =Super= key. For this reason I redefine important Emacs standard keybindings to ~M-x~ and the =god-mode= toggle.

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-k") nil)
  (global-set-key (kbd "C-k") #'execute-extended-command)
  (global-set-key (kbd "C-l") nil)
  (global-set-key (kbd "C-l") 'god-local-mode)
#+end_src

Uses normal movements keys and =TAB= key to move through =isearch=.

#+begin_src emacs-lisp
  (define-key isearch-mode-map (kbd "C-p") 'isearch-repeat-backward)
  (define-key isearch-mode-map (kbd "C-n") 'isearch-repeat-forward)
  (define-key isearch-mode-map (kbd "<tab>") 'isearch-repeat-forward)
  (define-key isearch-mode-map (kbd "<S-tab>") 'isearch-repeat-backward)
#+end_src

** Modal editing (god-mode)

God mode vs Evil? some links (prot,systemcrafters).

#+begin_src emacs-lisp
  (use-package god-mode
    :init
    (defun minemacs-god-mode-enabled ()
      (setq cursor-type 'box))
    (defun minemacs-god-mode-disabled ()
      (setq cursor-type 'bar))
    :config
    (add-hook 'god-mode-enabled-hook 'minemacs-god-mode-enabled)
    (add-hook 'god-mode-disabled-hook 'minemacs-god-mode-disabled)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)
    (define-key god-local-mode-map (kbd "u") #'undo)
    (define-key god-local-mode-map (kbd "U") #'undo-redo)
    (define-key god-local-mode-map (kbd ">") #'end-of-buffer)
    (define-key god-local-mode-map (kbd "<") #'beginning-of-buffer)
    (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
    (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
    (define-key god-local-mode-map (kbd "{") #'backward-sexp)
    (define-key god-local-mode-map (kbd "}") #'forward-sexp)
    (god-mode)
    (add-to-list 'god-exempt-major-modes 'compilation-mode)
    (add-to-list 'god-exempt-major-modes 'org-capture-mode)
    (add-to-list 'god-exempt-major-modes 'org-agenda-mode)
    (add-to-list 'god-exempt-major-modes 'elfeed-search-mode)
    (add-to-list 'god-exempt-major-modes 'elfeed-show-mode)
    )
#+end_src

** Translations keys

This can be usefull in absence of god-mode, to easily ~C-c~ and ~C-x~ via super key (great on MacOS keyboards).

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "s-k") (kbd "M-x"))
  ;;(define-key key-translation-map (kbd "s-m") (kbd "C-x"))
  ;;(define-key key-translation-map (kbd "s-M") (kbd "C-c"))
#+end_src

** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode 1)
    (which-key-enable-god-mode-support 1))
#+end_src

** Super key

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "s-k") #'execute-extended-command)
  (global-set-key (kbd "s-n") #'god-local-mode)
  (global-set-key (kbd "s-)") #'kill-this-buffer)
  (global-set-key (kbd "s-j") #'switch-to-buffer)
  (global-set-key (kbd "s-N") #'dired-jump)
  (global-set-key (kbd "s-i") #'imenu)
  (global-set-key (kbd "s-H") #'minemacs-custom-open)
  (global-set-key (kbd "s-_") #'bookmark-set)
  (global-set-key (kbd "s--") #'bookmark-jump)
  (global-set-key (kbd "s-b") #'ibuffer)
  (global-set-key (kbd "s-F") #'occur)
  (global-set-key (kbd "s-r") #'repeat)
  (global-set-key (kbd "s-e") #'dabbrev-expand)
  (global-set-key (kbd "s-1") #'delete-other-windows)
  (global-set-key (kbd "s-3") #'split-window-horizontally)
  (global-set-key (kbd "s-2") #'split-window-vertically)
  (global-set-key (kbd "s-0") #'delete-window)
  (global-set-key (kbd "s-w") #'other-window)
  (global-set-key (kbd "s-W") (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "s-R") #'query-replace-regexp)
  (global-set-key (kbd "s-p") #'project-switch-to-buffer)
  (global-set-key (kbd "s-P") #'project-find-file)
  (global-set-key (kbd "s-t") #'rgrep)
  (global-set-key (kbd "s-[") #'previous-buffer)
  (global-set-key (kbd "s-]") #'next-buffer)
  (global-set-key (kbd "s-{") #'previous-window-any-frame)
  (global-set-key (kbd "s-}") #'next-window-any-frame)
  (global-set-key (kbd "s-q") #'tab-next)
  (global-set-key (kbd "s-=") #'balance-windows)
  (global-set-key (kbd "s-<backspace>") #'window-toggle-side-windows)
#+end_src

** COMMENT Key-chord

#+begin_src emacs-lisp
  (use-package key-chord
    :config
    (key-chord-define-global "gh" #'magit-status)
    (key-chord-define-global "oc" #'org-capture)
    (key-chord-define alchemist-mode-map "rt" #'alchemist-mix-rerun-last-test)
    (key-chord-define ruby-mode-map "rt" #'rspec-rerun))
#+end_src

** Hail Hydra!

Hydra package let you to easily bind custom keymaps.

#+begin_src emacs-lisp
    (use-package hydra
      :config
      (defhydra hydra-minemacs-appearance (:color blue)
	("z" #'text-scale-adjust "🔍 text-scale-adjust")
	("q" nil "🔚 quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-dev-tools (:color blue)
	("d" #'flymake-show-buffer-diagnostics "🔬 flymake diagnostic")
	("f" #'browse-url-of-file "🌐 Open file in Browser (browse-url-of-file)")
	("b" #'browse-url-of-buffer "🌐 Open buffer in Browser (browse-url-of-buffer)")
	("u" #'browse-url-of-buffer "👁️ Preview in browser (browse-url-of-buffer)")
	("q" nil "🔚 quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-bookmarks (:color blue)
	("j" #'bookmark-jump "🔖 jump")
	("s" #'bookmark-set "⏬ set")
	("R" #'minemacs-bookmarks-reload "🔄 reload from bookmarks file")
	("E" #'minemacs-bookmarks-open "✏️ raw edit bookrmarks file")
	("e" #'edit-bookmarks "📖 edit")
	("q" nil "🔚 quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-media (:color blue)
	("t" #'empv-toggle "⏯️ empv toggle")
	("q" nil "🔚 quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-org (:color blue)
	("a" #'org-agenda "📅 org-agenda")
	("c" #'org-capture "🔴 org-capture")
	("s-o" #'org-capture "🔴 org-capture")
	("C" #'org-roam-capture "🧠 org-roam-capture")
	("f" #'org-roam-node-find "🔍 org-roam-node-find")
	("q" nil "🔚quit"))

      (defhydra hydra-minemacs-filesystem (:color blue)
	("t" #'treemacs "🗃️ treemacs")
	("s" (lambda () (interactive) (find-file "~/Desktop")) "✏️ Desktop")
	("d" (lambda () (interactive) (find-file "~/Downloads")) "⬇️ Downloads")
	("h" (lambda () (interactive) (find-file "~/")) "🏠 home")
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-utils (:color blue)
	("x" #'world-clock "🐚 async shell command")
	("r" #'minemacs-utils-record "🎤 record audio")
	("c" #'world-clock "🗺️ world clock")
	("t" #'alarm-clock-set "⏰ set timer!")
	("T" #'alarm-clock-list-view "📖 list timers")
	("1" (lambda () (interactive) (alarm-clock-set "10 min" "🔥 FIRE!")) "🔥 10min")
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-config (:color blue)
	("c" (lambda () (interactive) (find-file (minemacs-config-file))) "🛠️ open config")
	("C" (lambda () (interactive) (find-file custom-file)) "🛠️ open custom")
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-mail+news (:color blue)
	("g" #'gnus "📬 gnus")
	("m" #'mu4e "📧 mu4e")
	("r" #'elfeed "📰 elfeed")
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs-shells (:color blue)
	("v" (lambda (&optional arg) (interactive "P") (vterm arg)) "🖥️ vterm")
	("t" #'minemacs-tmux/open "🖥️ tmux")
	("e" #'minemacs/eshell-here "🐚 eshell (here)"))

      (defhydra hydra-minemacs-local-project (:color blue)
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (defhydra hydra-minemacs (:color blue)
	("8" #'emoji-search "😁 emoji")
	("a" #'hydra-minemacs-appearance/body "🎨 appearance")
	("b" #'hydra-minemacs-bookmarks/body "🔖 bookmarks")
	("m" #'hydra-minemacs-config/body "✨ minemacs")
	("M" #'hydra-minemacs-media/body "🎥 media")
	("d" #'hydra-minemacs-dev-tools/body "🖥️ development")
	("n" #'hydra-minemacs-mail+news/body "📧 news+mail")
	("e" #'eshell "🐚 eshell")
	("w" #'eww "🌐 eww")
	("f" #'hydra-minemacs-filesystem/body "📁 filesystem")
	("g" #'magit-status "🐙 Magit")
	("o" #'hydra-minemacs-org/body "📅 org")
	("r" #'recentf "⌛recentf")
	("s" #'hydra-minemacs-shells/body "🐚 shells")
	("u" #'hydra-minemacs-utils/body "🔦 utils")
	("l" #'hydra-minemacs-local-project/body "🦞 local-project")
	("q" nil "🔚quit")
	("s-m" nil "quit"))

      (global-set-key (kbd "C-x C-m") #'hydra-minemacs/body)
      (global-set-key (kbd "C-x j") #'execute-extended-command)
      (global-set-key (kbd "C-x J") #'god-local-mode)
      (global-set-key (kbd "s-m") (kbd "C-x C-m"))
      (global-set-key (kbd "s-o") #'hydra-minemacs-org/body))
#+end_src

The main purpose of the empty hydra =hydra-minemacs-local-project= is to be defined per-project usings =add-dir-local-variable= like that can be user like this:

#+begin_example emacs-lisp
;;; Directory Local Variables            -*- no-byte-compile: t -*-
;;; For more information see (info "(emacs) Directory Variables")

((elixir-mode . ((eval . (defhydra hydra-minemacs-local-project (:color blue)
                           ("r" #'alchemist-mix-rerun-last-test "♻️ rerun test")
                           ("q" nil "🔚quit") ("s-m" nil "quit"))))))
#+end_example
* Bookmarks

Get the bookmarks from my Dropbox.

#+begin_src emacs-lisp
  (setq bookmark-default-file "~/Dropbox/minemacs/bookmarks")
#+end_src

Define some usefull functions to deal with bookmarks.

#+begin_src emacs-lisp
  (defun minemacs-bookmarks-open ()
    "Open the bookmark file"
    (interactive)
    (find-file bookmark-default-file))

  (defun minemacs-bookmarks-reload ()
    "Clear bookmarks, reload from bookmark-default-file"
    (interactive)
    (setq bookmark-alist nil)
    (bookmark-load bookmark-default-file))
#+end_src

Define a custom jumper avoid to open always on EWW in case the bookmark was placed with it.

#+begin_src emacs-lisp
  (defun minemacs/browse-url-handler-bookmark-jump (bookmark)
    "Bookmark jump handler: relies on =browse-url-handler= to pick the right browser.
    Define a custom jumper avoid to open always on EWW in case the bookmark was placed with it"
    (browse-url (bookmark-prop-get bookmark 'location)))
#+end_src

Here we override the standard =eww-bookmark-jump= action, so even if we store a bookmark via eww, we're going to use the proper browser when opening it.

#+begin_src emacs-lisp
  (require 'eww)
  (defalias 'eww-bookmark-jump 'minemacs/browse-url-handler-bookmark-jump)
  ;(require 'bookmark)
  ;(put 'minemacs/browse-url-handler-bookmark-jump 'bookmark-handler-type "browse-url-handlers")
#+end_src

* Web browsing

Define handlers for =browse-url=. It can be used as bookmark handler via =minemacs/browse-url-handler-bookmark-jump=.

#+begin_src emacs-lisp
  (setq browse-url-handlers '(("github" . browse-url-chrome)
			      ("youtube" . browse-url-firefox)
			      ("." . eww-browse-url)))
#+end_src

* Troubleshooting 
** MacOS compatibility                                         :portability:

On MacOS there are some problem on well syncing ENVs variables.
A solution is to install the *exec-path-from-shell* package

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

* Extra modules
** COMMENT Minemacs ext.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/ext.el
:END:

Some experiments on how to /titleize/ an link in an org buffer. That's an unworking wip 👷

#+begin_src emacs-lisp
  (defun minemacs/utils/fetch-url (url callback)
    (request
      url
      :parser 'buffer-string
      :success
      (cl-function (lambda (&key data &allow-other-keys) (funcall callback data)))
      :error
      (cl-function (lambda (&rest args &key error-thrown &allow-other-keys)
                   (message "Got error: %S" error-thrown))))
      url)

  (defun minemacs/org/titleize-url ()
    (interactive)
    (let* ((target-url (thing-at-point-url-at-point))
           (callback (lambda (body)
                       (string-match "<title>\\(.+?\\)</title>" body)
                       (insert (match-data 1 body)))))
      (minemacs/utils/fetch-url target-url callback)))
#+end_src

** Utils
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/utils.el
:END:

#+begin_src emacs-lisp
  (use-package alarm-clock)
  (use-package ytdl)
#+end_src

*** Easily record a wav file

#+begin_src elisp
  (defun minemacs-utils-record (&optional outfile)
    "Record using ffmpgeg"
    (interactive "fRecord audio to file: ")
    (let ((cmd (format "ffmpeg -f avfoundation -i ':default' %s" outfile)))
      (minemacs-vterm-exec cmd)))
#+end_src

*** Espeak integration

Interact with [[https://espeak.sourceforge.net/][eSpeak]].

#+begin_src elisp
  (defvar minemacs-espeak-language "it"
    "Default langauge for espeak")

  (defvar minemacs-espeak-buffer
    (get-buffer-create "*Espeak*")
    "Default output buffer for espeak")

  (defun minemacs-espeak-speak (sentence &optional voice)
    (interactive (list
		  (read-from-minibuffer "Sentence: ")
		  (completing-read "Voice: " '("it" "en"))))
    (let* ((voice (or voice minemacs-espeak-language))
	   (command (format "espeak -v %s '%s'" voice sentence)))
      (if (and sentence voice)
	  (with-current-buffer minemacs-espeak-buffer
	    (async-shell-command command minemacs-espeak-buffer)
	    (insert command)))))
#+end_src

** Email and News
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/mail-news.el
:END:
*** Gnus

#+begin_example emacs-lisp
(setq user-mail-address "<EMAIL_ADDRESS>"
      user-full-name "<FULL NAME>"
      user-login-name "<LOGIN_NAME_USUALLY_THE_SAME_AS_EMAIL_ADDRESS>"
      mml-secure-openpgp-signers '("YOUR KEY ID")
      auth-sources '("~/.authinfo.gpg")
      gnus-startup-file "~/.newsrc"
      gnus-select-method '(nnimap "gmail"
				  (nnimap-address "imap.example.com")  ; it could also be imap.googlemail.com if that's your server.
				  (nnimap-server-port "imaps")
				  (nnimap-stream ssl))
      message-send-mail-function 'smtpmail-send-it
      send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.example.com"
      smtpmail-smtp-service 587 ; or 465
      smtpmail-stream-type 'starttls
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
#+end_example


A problem with Gnus as email client is that it always hide readed messages. A way to always show them could be by customizing the group parameters (follow this [[https://emacs.stackexchange.com/questions/55334/gnus-inbox-display-read-and-unread-emails][SO thread]]).

#+begin_quote
Type ~G-c~ over the folder and search for 'Permanently visible'. Tick the checkbox next to that and press [done].
#+end_quote

*** Elfeed

#+begin_src emacs-lisp
  (use-package elfeed)
  (use-package elfeed-tube :after elfeed)
#+end_src

#+begin_src elisp
  (run-at-time "15 minutes" t #'elfeed-update)
#+end_src
*** Mu4e

Firstly, install =mu= and a MailBox <-> Imaps syncronizer like =mbsync=. You should also rely on =pass=, the [[https://www.passwordstore.org/][the standard unix password manager]], in order to store and fetch your passwords in a secure way.

Useful links at:
- http://frostyx.cz/posts/synchronize-your-2fa-gmail-with-mbsync
- https://isync.sourceforge.io/mbsync.html

#+begin_example toml
  IMAPAccount email-service-imaps
  #Host export.imap.mail.email-service.com
  Host imap.mail.email-service.com
  Port 993
  #UseIMAPS yes
  #RequireSSl yes
  SSLType IMAPS
  SSLVersions TLSv1.2
  AuthMechs PLAIN
  User username@email-service.com
  #Pass supercomplicatedpassword
  PassCmd "pass my-imaps"

  IMAPStore email-service-remote
  Account email-service-imaps

  MaildirStore email-service-local
  Path ~/MailDir/email-service/
  Inbox ~/MailDir/email-service/INBOX
  Subfolders Verbatim

  Channel email-service
  #Master :email-service-remote:
  #Slave :email-service-local:
  Far :email-service-remote:
  Near :email-service-local:
  Create Both
  Expunge Both
  Patterns *
  #Patterns * !"[Gmail]/All Mail" !"[Gmail]/Important" !"[Gmail]/Starred" !"[Gmail]/Bin"
  SyncState *
#+end_example

#+begin_src emacs-lisp
  (require 'mu4e)
#+end_src

To set multiple accounts within =mu4e= you have to set the =mu4e-contexts= variable. An interesting screencast/article from System Crafters about that can be found [[https://systemcrafters.net/emacs-mail/managing-multiple-accounts/][here]].

#+begin_example elisp
  (setq mu4e-contexts
        (list
         ;; Work account
         (make-mu4e-context
          :name "GMail"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "my-email@gmail.com")
                  (user-full-name    . "My-Email (Gmail)")
                  (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

         ;; Personal account
         (make-mu4e-context
          :name "Yahoo"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Yahoo" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "my-email@yahoo.com")
                  (user-full-name    . "My-Email (Yahoo)")
                  (mu4e-drafts-folder  . "/Yahoo/Drafts")
                  (mu4e-sent-folder  . "/Yahoo/Sent")
                  (mu4e-refile-folder  . "/Yahoo/Archive")
                  (mu4e-trash-folder  . "/Yahoo/Trash")))))
#+end_example

** Multimedia
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/media.el
:END:

*** Bongo

#+begin_src emacs-lisp
  (use-package bongo)
#+end_src

*** Empv

#+begin_src emacs-lisp
  (use-package empv)
#+end_src

*** Emms

[[https://www.youtube.com/watch?v=kII413hkyis&list=WL&index=1][Here's a good video about that]].

#+begin_src elisp
  (use-package emms
    :custom
    (emms-player-list '(emms-player-mpv)))
#+end_src

** IDE
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/ide.el
:END:

*** Versioning with Magit

#+begin_src emacs-lisp
  (use-package magit
    :bind
    (("C-x g" . #'magit-status))
    :config
    (transient-append-suffix 'magit-rebase "-d" '("-D" "Ingore date" "--ignore-date"))
    (transient-append-suffix 'magit-rebase "-r" '("-A" "Set Author" "--author")))
  (use-package sqlite3)
  (use-package forge
    :after magit)
#+end_src

*** Languages support
**** Language server protocol

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook
    (ruby-mode . lsp)
    (yaml-mode . lsp)
    (js-mode . lsp)
    (json-mode . lsp)
    (scss-mode . lsp)
    (css-mode . lsp)
    (elixir-mode . lsp)
    (less-css-mode . lsp))

  (use-package lsp-ui
    :after lsp-mode)
#+end_src

**** Markup languages (YAML, CSV)

#+begin_src emacs-lisp
  (use-package yaml-mode
    :custom
    (yaml-imenu-generic-expression "^\\(:?[a-zA-Z_-]+\\):" 1))

  (use-package csv-mode)
#+end_src

**** W3: HTML and Javascript

#+begin_src emacs-lisp
  (use-package web-mode
    :custom
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (js-indent-level 2)
    (css-indent-offset 2)
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.rest\\'" . restclient-mode)))

  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

  (use-package emmet-mode
    :after web-mode
    :hook
    (sgml-mode . emmet-mode)
    (html-mode . emmet-mode)
    (web-mode . emmet-mode)
    (css-mode . emmet-mode))
#+end_src

**** Elixir
**** Docker

#+begin_src elisp
  (use-package docker)
#+end_src

**** Elixir Major mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

Install also the standard =elixir-mode= and the package to manage =exunit=.

#+begin_src emacs-lisp
  (use-package elixir-mode)
  (use-package exunit
    :after 'elixir-mode)
  (use-package alchemist)
#+end_src

But it seems =Alchemist= is old and unmaintained. I've then found =Apprentice= package (a fork of =Alchemist=) following the [[https://github.com/Sasanidas/Apprentice/blob/master/doc/installation.md][documentation]]; first of all, download the repo:

#+begin_src sh :tangle no :results no
  git clone https://github.com/Sasanidas/Apprentice ~/.emacs.d/vendor/apprentice.el
#+end_src

Then load the package

#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path "~/.emacs.d/vendor/apprentice.el/")
  (require 'apprentice)
#+end_src

**** Ruby

#+begin_src emacs-lisp
  (use-package ruby-mode)
  (use-package bundler)
  (use-package rspec-mode
    :config
    (add-hook 'after-init-hook 'inf-ruby-switch-setup)
    (add-hook 'compilation-filter-hook #'inf-ruby-auto-enter)
    ;;(eval-after-load 'rspec-mode '(rspec-install-snippets))
    (setq comint-scroll-to-bottom-on-output t))

  (use-package rinari
    :config
    (defalias 'rake 'rinari-rake))
#+end_src

*** autoinsert.el

This part is not tangled and is *WIP*
Studying =autoinsert= since is Emacs built-in libray, it could replace [[Yasnippet][Yasnippet]] in the future?

#+begin_src emacs-lisp :tangle no
  (require 'autoinsert)
  (setq auto-insert-mode t
        auto-insert-directory "~/Dropbox/minemacs/autoinsert/")
  (add-hook 'find-file-hook 'auto-insert)
  (add-to-list 'auto-insert-alist '(org-mode . "template.org"))
#+end_src

*** Terminal emulator

#+begin_src emacs-lisp
  (use-package vterm
    :after god-mode
    :config
    (add-to-list 'god-exempt-major-modes 'vterm-mode)

    (defun minemacs-tmux/open ()
      (interactive)
      (with-current-buffer (vterm "*<tmux>*")
        (vterm-send-string "tmux attach\n")))

    (defun minemacs-vterm-exec (command)
      (interactive "sCommand: ")
      (let ((buffer-name (format "*vterm-exec <%s>*" command)))
        (with-current-buffer (vterm buffer-name)
          (vterm-send-string (format "%s\n" command))))))
#+end_src

*** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (defun minemacs/autoinsert-yas-expand()
      "Replace text in yasnippet template."
      (yas/expand-snippet (buffer-string) (point-min) (point-max)))

    (add-to-list 'yas-snippet-dirs "~/Dropbox/minemacs/snippets/")
    ;; (require 'autoinsert)
    ;; (add-to-list 'auto-insert-alist '(org-mode . ["template.org" org-mode minemacs/autoinsert-yas-expand]))

    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after 'yasnippet)
#+end_src

*** Docker

#+begin_src emacs-lisp
(use-package docker)
#+end_src

*** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs)
  (use-package treemacs-nerd-icons
    :after treemacs)
#+end_src

** Appearance
*** Doom modeline
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/doom.el
:END:

#+begin_src emacs-lisp
  (use-package doom-themes)
  (use-package nerd-icons)
  (use-package doom-modeline
    :after 'nerd-icons
    :init
    (doom-modeline-mode 1))
#+end_src

** Consult
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/consult.el
:END:

#+begin_src emacs-lisp
  (use-package consult
    :bind
    (("s-j" . consult-buffer)
     ("s-i" . consult-imenu-multi)
     ("s-l" . consult-history)
     ("s-I" . consult-outline)
     ("s-f" . consult-line)
     ("s-T" . consult-grep)))
#+end_src

** Internet
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/net.el
:END:

*** Gemini

#+begin_src emacs-lisp
  (use-package gemini-mode)
  (use-package elpher)
#+end_src

*** engine-mode

This code is going to patch a function from =engine.el=: =browse-url= is going to check =browse-url-handlers= first, and if it's defined is not going to invoke =browse-url-defauult-function=, so if we want to enable a browser-specific engine (with =:browser= keyword), we have to nullify =browse-url-handlers=.

#+begin_src emacs-lisp
  (use-package engine-mode
    :config
    (defun engine/execute-search (search-engine-url browser-function search-term)
      "Display the results of the query."
      (interactive)
      (let ((browse-url-handlers nil)
            (browse-url-browser-function browser-function))
        (browse-url
         (format-spec search-engine-url
                      (format-spec-make ?s (url-hexify-string search-term)))))))
#+end_src

#+begin_src emacs-lisp
  (use-package engine-mode
    :init
    (setq engine/browser-function #'browse-url-firefox)
    :config
    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :browser 'eww-browse-url
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "h")

    (defengine google
      "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :browser 'browse-url-firefox
      :keybinding "g")

    (defengine google-images
      "https://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
      :keybinding "i")

    (defengine google-maps
      "https://maps.google.com/maps?q=%s"
      :docstring "Google Maps"
      :keybinding "m")

    (defengine google-maps
      "https://www.openstreetmap.org/search?query=%s"
      :docstring "OpenStreetMap"
      :keybinding "M")

    (defengine google-translate-to-it
      "https://translate.google.it/?sl=auto&tl=it&text=%s&op=translate"
      :docstring "Translate to IT"
      :keybinding "t")

    (defengine google-translate-to-en
      "https://translate.google.it/?sl=it&tl=en&text=%s&op=translate"
      :docstring "Translate from IT to English"
      :browser 'browse-url-firefox
      :keybinding "T")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (defengine wikipedia
      "https://www.wikipedia.org/search-redirect.php?language=it&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis."
      :browser 'eww-browse-url)

    (defengine youtube
      "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")

    (engine-mode t))
#+end_src

** TODO COMMENT Bifrost
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/modules/bifrost.el
:END:

#+begin_src emacs-lisp
  (use-package web-server
    :config
    (defmacro minemacs/bifrost--build-handler (par)
      (let ((matcher (car par)) (response (cdr par)))
	(message matcher)
	`((:GET ,matcher) .
	  (lambda (,request)                        ; reply with "hello world"
	    (with-slots (process) request
	      (ws-response-header process 200 '("Content-type" . "text/plain"))
	      (process-send-string process response))))))

      (setq minemacs/bifrost-handlers
	    '(("." . "console.log(2);")))

      (defun minemacs/bifrost/start (&optional port)
	(interactive)
	(setq minemacs/bifrost-server-port 9000)
	(let* ((server (ws-start
			(mapcar
			 (lambda (i) (minemacs/bifrost--build-handler i))
			   minemacs/bifrost-handlers)
			minemacs/bifrost-server-port)))
	  (setq minemacs/bifrost-server server)))

      (defun minemacs/bifrost/stop ()
	(interactive)
	(ws-stop minemacs/bifrost-server))
#+end_src

** Load modules!

#+begin_src emacs-lisp
  (setq minemacs-modules-file (or (getenv "MINEMACS_MODULES_FILE") (concat user-emacs-directory "modules.el")))
  (setq minemacs-active-modules nil)
  (load minemacs-modules-file 'noerror)
#+end_src

Don't tangle the =modules.el= file if it already exists with the tangle option =:tangle (let ((modules-file (concat user-emacs-directory "modules.el"))) (if (file-exists-p modules-file) "no" modules-file))=.

#+begin_src emacs-lisp :tangle (if (file-exists-p minemacs-modules-file) "no" minemacs-modules-file)
  (setq minemacs-active-modules '(blorg consult utils ide mail-news doom net private))
  (mapcar
   (lambda (module)
     (load
      (format "%smodules/%s.el" user-emacs-directory module)
      'noerror))
   minemacs-active-modules)
#+end_src

* Custom file

#+begin_src emacs-lisp
  (setq custom-file (or (getenv "MINEMACS_PROFILE") "~/Dropbox/minemacs/custom.el"))
  (load custom-file 'noerror)
#+end_src

* Server mode

#+begin_src emacs-lisp
(server-start)
#+end_src

* Docs
** Regular Expression Syntax

Here is the syntax used by Emacs for regular expressions. Any character matches itself, except for the list below.

The following characters are special : . * + ? ^ $ \ [

Between brackets [], the following are special : ] - ^

Many characters are special when they follow a backslash – see below.

  .        any character (but newline)
  *        previous character or group, repeated 0 or more time
  +        previous character or group, repeated 1 or more time
  ?        previous character or group, repeated 0 or 1 time
  ^        start of line
  $        end of line
  [...]    any character between brackets
  [^..]    any character not in the brackets
  [a-z]    any character between a and z
  \        prevents interpretation of following special char
  \|       or
  \w       word constituent
  \b       word boundary
  \sc      character with c syntax (e.g. \s- for whitespace char)
  \( \)    start\end of group
  \< \>    start\end of word
  \_< \_>  start\end of symbol
  \` \'    start\end of buffer\string
  \1       string matched by the first group
  \n       string matched by the nth group
  \{3\}    previous character or group, repeated 3 times
  \{3,\}   previous character or group, repeated 3 or more times
  \{3,6\}  previous character or group, repeated 3 to 6 times
  \=       match succeeds if it is located at point
*?, +?, and ?? are non-greedy versions of *, +, and ? – see NonGreedyRegexp. Also, \W, \B, and \Sc match any character that does not match \w, \b, and \sc.

Characters are organized by category. Use C-u C-x = to display the category of the character under the cursor.

  \ca      ascii character
  \Ca      non-ascii character (newline included)
  \cl      latin character
  \cg      greek character
Here are some syntax classes that can be used between brackets, e.g. [[:upper:]\|[:digit:]\.].

  [:digit:]  a digit, same as [0-9]
  [:alpha:]  a letter (an alphabetic character)
  [:alnum:]  a letter or adigit (an alphanumeric character ()
  [:upper:]  a letter in uppercase
  [:space:]  a whitespace character, as defined by the syntax table
  [:xdigit:] an hexadecimal digit
  [:cntrl:]  a control character
  [:ascii:]  an ascii character
Syntax classes:

  \s-   whitespace character        \s/   character quote character
  \sw   word constituent            \s$   paired delimiter
  \s_   symbol constituent          \s'   expression prefix
  \s.   punctuation character       \s<   comment starter
  \s(   open delimiter character    \s>   comment ender
  \s)   close delimiter character   \s!   generic comment delimiter
  \s"   string quote character      \s|   generic string delimiter
  \s\   escape character

** Vectors

Get an element from a vector

#+begin_example emacs-lisp
;; get a element from vector
(aref ["a" "b" "c"] 0) ; ⇒ "a"
;; get a element from vector
(elt ["a" "b" "c"] 0) ; ⇒ "a"
#+end_example

What's the difference between =aref= and =elt=?
=elt= is more general. It works on vector and list. But if you know
it's vector, you should use =aref=, because it's precise and faster.

** Timers

You can run specified function at specified time and with a specific timeout! Check out [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Timers.html][the doc]] for more information.

#+BEGIN_QUOTE
The list-timers command lists all the currently active timers. There’s
only one command available in the buffer displayed: c
(timer-list-cancel) that will cancel the timer on the line under
point.
#+END_QUOTE

** (interactive) functions

Refs to [[https://emacs.stackexchange.com/questions/32248/how-to-write-a-function-with-an-interactive-choice-of-the-value-of-the-argument][this SO post]] try [[elisp:(completing-read "Prompt: " '(i1 i2 i3))]] and [[https://emacsdocs.org/docs/elisp/Text-from-Minibuffer][this post]]; try [[elisp:(read-from-minibuffer "Prompt: " "initial")]]. Take a look at =minemacs/demo-function=, it can help if you want to write functions with bit more complex interactive prompts.

#+begin_example emacs-lisp
  (defun minemacs/demo-function (url &optional handler)
    "Example function."
    (interactive (list
		  (read-from-minibuffer "URL: ")
		  (completing-read "handler: " '(browse-url-firefox browse-url-chrome))))
     (message (format "url: %s, handler: %s" url handler )))
#+end_example
** Buffer management

Code stolen from [[https://stackoverflow.com/questions/4886745/emacs-what-is-the-shortcut-key-to-clear-buffer][stackoverflow]].

#+begin_src emacs-lisp :tangle no
(defun minemacs-clear-buffer ()
  "clear whole buffer add contents to the kill ring"
  (interactive)
  (kill-region (point-min) (point-max)))

(defun minemacs-clear-buffer-permenantly ()
  "clear whole buffer, contents is not added to the kill ring"
  (interactive)
  (delete-region (point-min) (point-max)))
#+end_src

** Commands, functions and variables

Just press ~C-h o~ to get help on those symbols.

- =align-regexp=
- =add-file-local-variable= (append at bottom of the file) and =add-file-local-variable-prop-line= (prepend in the first line)
- =browse-url-of-buffer=
- =completions-max-height=
- =find-name-dired=
- =json-pretty-print-buffer=
- =org-archive-subtree-default=
- =org-babel-load-file=
- =pp-eval-expression=
- =proced=

** Libaries

- [[https://tkf.github.io/emacs-request/][request.el]]

** Useful topics

- [[https://orgmode.org/manual/Results-of-Evaluation.html][Results of Evaluation]]

* Credits

  I would like to thanks:
- [[https://www.gnu.org/software/emacs/][The Emacs editor]] and his *guru* [[https://stallman.org/][Richard Stallman]].
- [[https://www.gnu.org/software/emacs/manual/pdf/emacs-lisp.pdf][The Elisp documentation]]
- [[http://kelvinh.github.io/][Kelvin Hu]] for his [[https://github.com/kelvinh/.emacs.d][emacs configuration]] and the idea to write it in a *literate style*.
- [[http://www.howardism.org/][Howard Abrams]] for his [[https://github.com/howardabrams/dot-files][dotfiles]].
- [[https://github.com/aaronbieber][Aaron Bieber]] for his dotfiles and for the wonderful speech [[https://www.youtube.com/watch?v%3DJWD1Fpdd4Pc][Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs]] that makes me *fall in love* with Emacs. ;-)
- [[https://protesilaos.com/][Protesilaos Stavrou]] for his [[https://protesilaos.com/dotemacs/][comprehensive "dotemacs" (.emacs) for GNU/Linux]] and [[https://protesilaos.com/codelog/][the huge amount of posts and videos about Emacs]].
- [[https://github.com/sponsors/daviwil][David Wilson]] for his fantastic [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters screencasts]]!
- [[http://staff.science.uva.nl/~dominik/][Carsten Dominik]], creator of [[http://orgmode.org][org-mode]] 🦄 also thanks to [[https://orgmode.org/worg/][worg]] 🌈
- [[https://gitlab.com/spudlyo][Mike Hamrick]] for [[https://gitlab.com/spudlyo/orgdemo2][orgdemo2]] which is really useful if you want learn a lot of stuff about =org-mode=.
- [[http://ehneilsen.net][Eric H. Neilsen, Jr.]] for his wonderful  [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][org-mode examples and cookbook]].
- [[https://www.omarpolo.com/][Omar Polo]] and [[https://ict4g.net/adolfo/index.html][Adolfo Villafiorita]]


# Local Variables:
# olivetti-minimum-body-width: 40
# End:
